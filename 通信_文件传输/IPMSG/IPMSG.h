/* ************************************************************************
 *       Filename:  IPMSG.h （飞鸽的主要实现部分）
 *    Description:  还未解决的问题（无法正确接收大文件 还不是很稳定）
 *        Version:  1.0
 *        Created:  2012年06月22日 17时53分58秒
 *       Compiler:  gcc
 *         Author:  Ebenezer 
 * ************************************************************************/

#ifndef	IPMSG_H
#define	IPMSG_H

//========================================================================
//	语法格式：	int IPMSG_UDP_Send(int who, unsigned long cmd, char buf[], int buf_len)
//	实现功能：	按IPSMG协议组织发送包 并通过UDP发送（UserList_GetNetIP（）)
//	参数：		int who：接收者   int cmd：命令字   char buf[]：附加信息 int buf_len buf的长度
//	返回值：	成功: 0  失败: -1 
//========================================================================
int IPMSG_UDP_Send(int who, unsigned long cmd, char buf[], int buf_len);

//========================================================================
//	语法格式：	int IPMSG_UDP_Send_Str(char buf[]) 		(调用IPMSG_UDP_Send()实现)
//	实现功能：	按IPSMG协议组织发送包 并通过UDP发送（UserList_GetNetIP（）)
//	参数：		char buf[]
//	返回值：	成功0  遇到错误 -1 
//========================================================================
int IPMSG_UDP_Send_Str(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_UserAdd(unsigned int s_addr, char *argv[])
//	实现功能：	根据ip(s_addr) 添加新用户 或更新用户信息
//				如果消息类型为 通知上线 则回复 IPMSG_ANSENTRY
//	参数：		unsigned int s_addr, char *argv[]
//	返回值：	成功: 0  失败: -1 
//========================================================================
int IPMSG_UserAdd(unsigned int s_addr, char *argv[]);

//========================================================================
//	语法格式：	int IPMSG_GetAMsg(unsigned int s_addr, char *argv[])
//	实现功能：	在屏幕上打印消息或是要求接收文件
//	参数：		unsigned int s_addr, char *argv[] 全局（user_name）
//	返回值：	成功0  遇到错误 -1 
//========================================================================
int IPMSG_GetAMsg(unsigned int s_addr, char *argv[]);

//========================================================================
//	语法格式：	int IPMSG_UserDel(unsigned int s_addr, char *argv[])
//	实现功能：	根据ip(s_addr) 从列表中删除用户
//	参数：		unsigned int s_addr, char *argv[]
//	返回值：	0 
//========================================================================
int IPMSG_UserDel(unsigned int s_addr, char *argv[]);

//========================================================================
//	语法格式：	int IPMSG_ReceiveUdpMSGOnce(void)
//	实现功能：	通过 udp_sockfd 接收一个消息 解析调用函数处理
//	参数：		无
//	返回值：	成功: 0  失败: -1 
//========================================================================
int IPMSG_ReceiveUdpMSGOnce(void);

//========================================================================
//	语法格式：	int IPMSG_Help(char buf[])
//	实现功能：	打印帮助信息
//	参数：		无
//	返回值：	0 
//========================================================================
int IPMSG_Help(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_ClearScreen(char buf[])
//	实现功能：	清屏
//	参数：		无
//	返回值：	0 
//========================================================================
int IPMSG_ClearScreen(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_UserList(char buf[])
//	实现功能：	打印列表
//	参数：		无
//				全局（user_list）
//	返回值：	0 
//========================================================================
int IPMSG_UserList(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_FileList(char buf[])
//	实现功能：	打印可下载文件列表
//	参数：		无
//				全局（user_list）
//	返回值：	0 
//========================================================================
int IPMSG_FileList(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_Quit(char buf[])
//	实现功能：	退出
//	参数：		无
//	返回值：	-1 
//========================================================================
int IPMSG_Quit(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_DownFile(char buf[])
//	实现功能：	通过TCP协议接收文件
//	参数：		char buf[]
//	返回值：	成功0  遇到错误 -1 
//========================================================================
int IPMSG_DownFile(char *arg);

//========================================================================
//	语法格式：	int IPMSG_TCP_GetFile(char buf[])
//	实现功能：	通过TCP协议接收文件
//	参数：		char buf[]
//	返回值：	成功0  遇到错误 -1 
//========================================================================
int IPMSG_TCP_GetFile(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_UDP_SendFile(char buf[])
//	实现功能：	将需要发送的文件信息 发送给对方 并将这些信息保存到server_file_list中 给TCP_Server使用
//	参数：		char buf[]
//	返回值：	成功0  遇到错误 -1 
//========================================================================
int IPMSG_UDP_SendFile(char buf[]);

//========================================================================
//	语法格式：	int IPMSG_GetUserInputOnce(void)
//	实现功能：	获取一次用户输入  解析调用相应函数处理
//	参数：		无
//	返回值：	成功: 0  失败(或调用退出): -1 
//========================================================================
int IPMSG_GetUserInputOnce(void);

//========================================================================
//	语法格式：	void *IPMSG_ServerProcess(void *arg)
//	实现功能：	为用户提供下载
//	参数：		TCP套接字
//	返回值：	成功: 0  失败(或调用退出): -1 
//========================================================================
void *IPMSG_ServerProcess(void *arg);

//========================================================================
//	语法格式：	void *IPMSG_TCP_Server(void *arg)
//	实现功能：	TCP 文件传输时使用
//	参数：		
//				全局（user_name, host_name, udp_sockfd）
//	返回值：	NULL
//========================================================================
void *IPMSG_TCP_Server(void *arg);

//========================================================================
//	语法格式：	int IPMSG_Start(char user[], char host[], int pic)
//	实现功能：	飞鸽 完成网络通信设置 发送上线广播 监听用户输入，UDP，TCP
//	参数：		char user[]用户名, char host[]主机名 pic 头像
//				全局（user_name, host_name, udp_sockfd）
//	返回值：	成功: 0  失败: -1 
//========================================================================
int IPMSG_Start(char user[], char host[], int pic);

#endif
